#include <iostream>
#include <string>
#include <queue>
#include <cmath>
#define MAX 5001
using namespace std;double sum(double a, double b){return max(a,b)+log1p(exp(-abs(a-b)));}double sum_arr(double array[], int n){double max = *std::max_element(array, array + n + 1);double sum = 0;for(int i = 0; i <= n; i++)sum += exp(array[i] - max);return max + log(sum);}double C_i_M_i,C_i_N_i,C_i_N2_i,v1,v2,v3,v4,v5,v6,v8,v12,v13,v15,v19,v20,v22,v26,v27,v28,v30,v34,v35,v37,v41,v43,v45,v46,v48,v52,v53,v55,v59,v61,v63,v64,v66,v70,v71,v73,v77,v78,v79,v80,v82,v86,v87,v89,v93,v94,v96,v100,v101,v103,v107,v108,v110,v114,v115,v116,v118,v122,v123,v125,v129,v130,v132,v136,v138,v140;

int main(){
double logs[MAX+1]; for(int i = 0; i <= MAX; i++) logs[i] = log(i);
	double v1_arr[MAX];
	C_i_M_i=0;
	for(int i_M_i=0;i_M_i<=5000;i_M_i++){
		if(i_M_i==0){
				double v3_arr[MAX];
				C_i_N_i=0;
				for(int i_N_i=0;i_N_i<=5000;i_N_i++){
					if(i_N_i==0){
						v8=sum(0.0+(0.6931471805*4999+0.6931471805*1),0.0+0);
						v6=sum(0.0+(0.6931471805*4999+0.6931471805*1+0.6931471805*1),0.0+v8);
						v3_arr[i_N_i]=v6*(5000);
					}
					else if(i_N_i==4999){
						v15=sum(0.0+(0.6931471805*1),0.0+0);
						v13=sum(0.0+(0.6931471805*1+0.6931471805*1),0.0+v15);
						v22=sum(0.0+(0.6931471805*1),0.0+0);
						v20=sum(0.0+(0.6931471805*1+0.6931471805*1),0.0+v22);
						v19=v20*(4999);
						v12=v13+v19;
						v3_arr[i_N_i]=C_i_N_i+v12+(0.6931471805*((i_N_i))+0.6931471805*((i_N_i)*(i_N_i-1))+0.6931471805*((i_N_i)*(5000-i_N_i))+0.6931471805*((5000-i_N_i)*(5000-i_N_i-1)));
					}
					else if(i_N_i!=5000){
						v30=sum(0.0+(0.6931471805*1+0.6931471805*(((5000-i_N_i-1))*(1))),0.0+0);
						v28=sum(0.0+(0.6931471805*1+0.6931471805*1+0.6931471805*(((5000-i_N_i-1))*(1))),0.0+v30);
						v27=v28*(5000-i_N_i);
						v37=sum(0.0+(0.6931471805*((5000-i_N_i)*(1))),0.0+0);
						v35=sum(0.0+(0.6931471805*((5000-i_N_i)*(1))+0.6931471805*1),0.0+v37);
						v34=v35*(i_N_i);
						v26=v27+v34;
						v3_arr[i_N_i]=C_i_N_i+v26+(0.6931471805*((i_N_i))+0.6931471805*((i_N_i)*(i_N_i-1))+0.6931471805*((i_N_i)*(5000-i_N_i)));
					}
					else{
						v3_arr[i_N_i]=(0.6931471805*24995000+0.6931471805*5000+0.6931471805*5000+0.6931471805*5000);
					}
					C_i_N_i=(C_i_N_i-logs[i_N_i+1])+logs[(5000)-i_N_i];
				}
				v1_arr[i_M_i]=sum_arr(v3_arr, 5000);
		}
		else if(i_M_i==4999){
			v48=sum(0.0+(0.6931471805*1),0.0+0);
			v46=sum(0.0+(0.6931471805*1+0.6931471805*1),0.0+v48);
			v55=sum(0.0+(0.6931471805*1),0.0+0);
			v53=sum(0.0+(0.6931471805*1+0.6931471805*1),0.0+v55);
			v52=v53*(4999);
			v45=v46+v52;
			v43=sum(0.0+(0.6931471805*1+0.6931471805*1+0.6931471805*1+0.6931471805*4999+0.6931471805*4999+0.6931471805*4999),0.0+v45);
			v1_arr[i_M_i]=C_i_M_i+v43+(0.6931471805*((i_M_i))+0.6931471805*((i_M_i))+0.6931471805*((i_M_i)*(i_M_i-1))+0.6931471805*((i_M_i)*(5000-i_M_i))+0.6931471805*((5000-i_M_i)*(5000-i_M_i-1)));
		}
		else if(i_M_i!=5000){
			if(5000-i_M_i==0){
				v59=0;
			}
			if(5000-i_M_i==1){
				v66=sum(0.0+(0.6931471805*1),0.0+0);
				v64=sum(0.0+(0.6931471805*1+0.6931471805*1),0.0+v66);
				v73=sum(0.0+(0.6931471805*1),0.0+0);
				v71=sum(0.0+(0.6931471805*1+0.6931471805*1),0.0+v73);
				v70=v71*(i_M_i);
				v63=v64+v70;
				v61=sum(0.0+(0.6931471805*1+0.6931471805*1+0.6931471805*1+0.6931471805*((1)*(i_M_i))+0.6931471805*((i_M_i))+0.6931471805*((i_M_i))),0.0+v63);
				v59=v61+(0.6931471805*((5000-i_M_i)*(5000-i_M_i-1)));
			}
			else{
				double v59_arr[MAX];
				C_i_N2_i=0;
				for(int i_N2_i=0;i_N2_i<=5000-i_M_i;i_N2_i++){
					if(i_N2_i==0){
						v82=sum(0.0+(0.6931471805*1+0.6931471805*(((5000-i_M_i-1))*(1))),0.0+0);
						v80=sum(0.0+(0.6931471805*1+0.6931471805*1+0.6931471805*(((5000-i_M_i-1))*(1))),0.0+v82);
						v79=v80*(5000-i_M_i);
						v89=sum(0.0+(0.6931471805*((5000-i_M_i)*(1))),0.0+0);
						v87=sum(0.0+(0.6931471805*((5000-i_M_i)*(1))+0.6931471805*1),0.0+v89);
						v86=v87*(i_M_i);
						v59_arr[i_N2_i]=v79+v86;
					}
					else if(i_N2_i==5000-i_M_i-1){
						v96=sum(0.0+(0.6931471805*1),0.0+0);
						v94=sum(0.0+(0.6931471805*1+0.6931471805*1),0.0+v96);
						v103=sum(0.0+(0.6931471805*1),0.0+0);
						v101=sum(0.0+(0.6931471805*1+0.6931471805*1),0.0+v103);
						v100=v101*(i_M_i);
						v110=sum(0.0+(0.6931471805*1),0.0+0);
						v108=sum(0.0+(0.6931471805*1+0.6931471805*1),0.0+v110);
						v107=v108*(i_N2_i);
						v93=v94+v100+v107;
						v59_arr[i_N2_i]=C_i_N2_i+v93+(0.6931471805*((i_N2_i))+0.6931471805*((i_N2_i)*(i_M_i))+0.6931471805*((i_N2_i)*(i_N2_i-1))+0.6931471805*((i_N2_i)*(5000-i_M_i-i_N2_i))+0.6931471805*((5000-i_M_i-i_N2_i)*(5000-i_M_i-i_N2_i-1)));
					}
					else if(i_N2_i!=5000-i_M_i){
						v118=sum(0.0+(0.6931471805*1+0.6931471805*(((5000-i_M_i-i_N2_i-1))*(1))),0.0+0);
						v116=sum(0.0+(0.6931471805*1+0.6931471805*1+0.6931471805*(((5000-i_M_i-i_N2_i-1))*(1))),0.0+v118);
						v115=v116*(5000-i_M_i-i_N2_i);
						v125=sum(0.0+(0.6931471805*((5000-i_M_i-i_N2_i)*(1))),0.0+0);
						v123=sum(0.0+(0.6931471805*((5000-i_M_i-i_N2_i)*(1))+0.6931471805*1),0.0+v125);
						v122=v123*(i_M_i);
						v132=sum(0.0+(0.6931471805*((5000-i_M_i-i_N2_i)*(1))),0.0+0);
						v130=sum(0.0+(0.6931471805*((5000-i_M_i-i_N2_i)*(1))+0.6931471805*1),0.0+v132);
						v129=v130*(i_N2_i);
						v114=v115+v122+v129;
						v59_arr[i_N2_i]=C_i_N2_i+v114+(0.6931471805*((i_N2_i))+0.6931471805*((i_N2_i)*(i_M_i))+0.6931471805*((i_N2_i)*(i_N2_i-1))+0.6931471805*((i_N2_i)*(5000-i_M_i-i_N2_i)));
					}
					else{
						v59_arr[i_N2_i]=(0.6931471805*((5000-i_M_i))+0.6931471805*((5000-i_M_i))+0.6931471805*((5000-i_M_i))+0.6931471805*((5000-i_M_i)*(i_M_i))+0.6931471805*((i_M_i))+0.6931471805*((i_M_i))+0.6931471805*((5000-i_M_i)*(5000-i_M_i-1)));
					}
					C_i_N2_i=(C_i_N2_i-logs[i_N2_i+1])+logs[(5000-i_M_i)-i_N2_i];
				}
				v59=sum_arr(v59_arr, 5000-i_M_i);
			}
			v1_arr[i_M_i]=C_i_M_i+v59+(0.6931471805*((i_M_i))+0.6931471805*((i_M_i))+0.6931471805*((i_M_i)*(i_M_i-1))+0.6931471805*((i_M_i)*(5000-i_M_i)));
		}
		else{
			v1_arr[i_M_i]=(0.6931471805*5000+0.6931471805*24995000+0.6931471805*5000+0.6931471805*5000+0.6931471805*5000);
		}
		C_i_M_i=(C_i_M_i-logs[i_M_i+1])+logs[(5000)-i_M_i];
	}
	v1=sum_arr(v1_arr, 5000);

cout << "exp(" << v1 << ") = " << exp(v1) << endl;
return 0;}